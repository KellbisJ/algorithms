(1) Sum Root to Leaf Numbers:
- Given a binary tree where each node contains a single digit (0-9), calculate the sum of all numbers formed by traversing from the root to each leaf node.
- Each root-to-leaf path in the tree represents a number. Combine the digits along the path to form that number.

(2) Number of Islands:
- Given a 2D grid map consisting of '1's (land) and '0's (water), count the total number of distinct islands.
- An island is defined as a group of connected '1's that are surrounded by water. Connection can only happen horizontally or vertically; diagonal connections are not considered.
- The goal is to determine how many separate islands exist in the grid.

(3) Flood Fill Algorithm: 
- An image is represented by an m x n integer grid where `image[i][j]`  represents the pixel value of the image.
- You are also given three integers: `sr`, `sc`, and `color`. You must perform a flood fill operation starting at the pixel `image[sr][sc]`.
- To perform the fill, consider the starting pixel along with any pixel connected in four directions (up, down, left, right) that share the same color as   the starting pixel. Continue this process for all connected pixels and replace their color with `color`.
- Return the modified image after the flood fill operation.
Example 1:

Input:
image = [[1,1,1],[1,1,0],[1,0,1]]  
sr = 1, sc = 1, color = 2

Output:
[[2,2,2],[2,2,0],[2,0,1]]

Explanation:
Starting at position , all pixels connected by a path of the same color as the initial pixel are filled with the new color .
The bottom-right pixel remains unchanged since it is not connected in four directions to the starting pixel.
Example 2:

Input:
image = [[0,0,0],[0,0,0]]  
sr = 0, sc = 0, color = 0

Output:
[[0,0,0],[0,0,0]]

Explanation:
The starting pixel already has the color `0`, so no changes are made to the image.

(4) Minimum Knight Moves: 
- Given a chess knight on an infinite chessboard, find the minimum number of moves needed to reach a target position (x, y) starting from (0, 0). The knight moves in an "L-shape" (2 squares in one direction and then 1 square perpendicular).

(5) Rotting Oranges:
-You are given an m x n grid where each cell can have one of three values:

0 = Empty cell

1 = Fresh orange

2 = Rotten orange

- Every minute, any fresh orange (1) that is 4-directionally adjacent (up, down, left, right) to a rotten orange (2) becomes rotten. Return the minimum number of minutes that must elapse until no fresh oranges remain. If it's impossible, return -1.

(6) Shortest Bridge Between Islands:
- Identify the First Island: Scan the grid until you find a cell with value . Use DFS to traverse all connected s, marking them as . This distinguishes the first island from the second.

* Example after DFS:
[2, 2, 0, 0, 0],
[2, 0, 0, 0, 0],
[0, 0, 0, 0, 1],
[0, 0, 0, 1, 1]

- Expand from the First Island:
Use BFS starting from the marked island's border. Each BFS level represents one water cell being flipped (i.e., a step).

- BFS Process: For every cell in the queue, check the 4 neighbors (up, down, left, right):

* If a neighbor is 1 (and unmarked), that neighbor belongs to the second island. Return the current number of steps as the answer.

* If a neighbor is water (0), mark it (e.g., set to -1) and add it to the queue.

- Termination:
The first time a BFS step finds an unmarked , that  count equals the minimum number of flips required. In our provided grid, this value is 4.

(7) Letter Combinations of a Phone Number:
- Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. The mapping of digits to letters is based on a traditional telephone keypad, as follows:
  [
    2: "abc"
    3: "def"
    4: "ghi"
    5: "jkl"
    6: "mno"
    7: "pqrs"
    8: "tuv"
    9: "wxyz"
  ]
- Return the combinations in any order.

* Examples:
- Input: digits = "23"
- Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

- Input: digits = ""
- Output: []

- Input: digits = "2"
- Output: ["a","b","c"]

* Notes:
- A digit string of length 0 returns an empty array.
- The order of the output does not matter (e.g., ["ad","ae"] is equivalent to ["ae","ad"]).

