(1) Sum Root to Leaf Numbers:
- Given a binary tree where each node contains a single digit (0-9), calculate the sum of all numbers formed by traversing from the root to each leaf node.
- Each root-to-leaf path in the tree represents a number. Combine the digits along the path to form that number.

(2) Number of Islands:
- Given a 2D grid map consisting of '1's (land) and '0's (water), count the total number of distinct islands.
- An island is defined as a group of connected '1's that are surrounded by water. Connection can only happen horizontally or vertically; diagonal connections are not considered.
- The goal is to determine how many separate islands exist in the grid.

(3) Flood Fill Algorithm: An image is represented by an m x n integer grid where `image[i][j]`  represents the pixel value of the image.
You are also given three integers: `sr`, `sc`, and `color`. You must perform a flood fill operation starting at the pixel `image[sr][sc]`.
To perform the fill, consider the starting pixel along with any pixel connected in four directions (up, down, left, right) that share the same color as the starting pixel. Continue this process for all connected pixels and replace their color with `color`.
Return the modified image after the flood fill operation.
Example 1:

Input:
image = [[1,1,1],[1,1,0],[1,0,1]]  
sr = 1, sc = 1, color = 2

Output:
[[2,2,2],[2,2,0],[2,0,1]]

Explanation:
Starting at position , all pixels connected by a path of the same color as the initial pixel are filled with the new color .
The bottom-right pixel remains unchanged since it is not connected in four directions to the starting pixel.
Example 2:

Input:
image = [[0,0,0],[0,0,0]]  
sr = 0, sc = 0, color = 0

Output:
[[0,0,0],[0,0,0]]

Explanation:
The starting pixel already has the color `0`, so no changes are made to the image.